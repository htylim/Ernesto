---
description: When asked to create an epic breakdown or stories for a given epic
globs: 
alwaysApply: false
---
## Goal

given the following: 

- a project's existing documentation (`/README.md`)
- a project's enumeration of its high-level epics (`/tasks/epics.md`)
- and a user choice of an specific epic from the previous enumeration.

Create a two-tier roadmap with stories as first level and tasks beneath laying out step-by-step instructions to guide an AI into the implementation of the give Epic.


## Terms

- **{Epic}** : Top-level milestone or feature set that delivers a cohesive product outcome. Groups several stories and can span multiple sprints.
- **{Story}** : User-facing slice of an epic that provides a complete piece of functionality or a clear non-functional goal. Small enough to estimate in days.
- **{Task}** : Concrete engineering action required to complete a story (e.g., “Add API endpoint”, “Write unit tests”). Executable in a focused work session.
- **{Epic id}** : Epic identifier. Composed of one integer, e.g.: "1".
- **{Story id}** : Story identifier. Composed of {Epic Id} plus a story index, e.g.: "1.2".
- **{Task num}** : Task identifier. Composed of {Story num} plus a task index, e.g.: "1.2.4".
- **{Epic|Story|Task title}** : One sentence title describing the given Epic, Story or task.
- **{Epic|Story|Task description}** : Longer description of the task, subtask, subsubtask.

 
## Output

- **format**: Markdown (`.md`)
- **location**: `/tasks/`
- **filename**: `{Epic id}_epic.md` (eg `01_epic.md`)


## Process

1. **Read project spec and Epic roadmap**
- Open `/README.md`
- Understand the project and all its functional and technical requirements as stated in the file. 
- Open `/tasks/epics.md`
- Understand the split of the project into high-level epics for the implementation of the project.

2. **Locate high-level Epic chosen by the user**
- In `tasks/epics.md` locate the high-level Epic asked to analyze (e.g. "5. Implement payments API”).
- Note the {Epic Id}, its {Epic title} and its {Epic description}.

3. **Verify you have all needed info**
- Compare Epic requirements against the `/README.md` details.
- If *any* information is missing (e.g., which database to use, API endpoints, required config, etc.), list those gaps.
- Ask the user specific, focused questions to fill in missing details. Do not start planning until you have answers.

4. **Create Epic breakdown file**  
- The file will present a step-by-step two-level breakdown for the implementation of the {Epic}.
- Filename: `tasks/{Epic id}_epic.md` (e.g. `tasks/05_epic.md`) 
- Will contain several sections organized with markdown headings:
    - `## Relevant Files` section with the list of files (and their description) that are relevant to this implementation plan.
    - `## Notes` section with general notes important for the developer to know when executing this roadmap.
    - `## Breakdown` section with a two-level break-down of the Epic into {Stories} and concrete step implementaetion {Tasks}.
    - `## STORY: {Story}` and `### TASK: {Task}` sections with additional implementation details important to the developer for that specific {Story} and {Task} implementation.
- {Stories}/{Tasks} _must_ no overlap or duplicate another (they must be orthogonal).
- Ordering is important, {Stories}/{Tasks} _must_ follow implementation order.
- {Stories}/{Tasks} break down should take into consideration all implementation best practices (coding, DB, web app development, etc..)
- {Tasks} has to be testable.
- Generated file _must_ follow this structure:
```markdown
# EPIC: [ ] {Epic id} {Epic title}

{Epic description}


## Relevant Files

- `app/path/to/file1.py` - Brief description of why this file is relevant (e.g., Contains the main component for this feature).
- `tests/path/to/test_file1.py` - Unit tests for `file1.py`.
- `app/path/to/another/file.py` - Brief description (e.g., API route handler for data submission).
- `tests/path/to/another/test_file.py` - Unit tests for `another/file.py`.
- `app/utils/helpers.py` - Brief description (e.g., Utility functions needed for calculations).
- `tests/utils/test_helpers.py` - Unit tests for `helpers.py`.


## Notes

- {Notes relevant to the implementation of the Epic}


## STORY and TASK Breakdown

- [ ] {Story id} {Story title}
    - [ ] {Task id} {Task title}
    - [ ] {Task id} {Task title}
- [ ] {Story id} {Story title}
    - [ ] {Task id} {Task title}
...etc...


## STORY: **{Story id} {Story title}**

{Extra details and description for the implementation of the story}


### TASK: **{Task id} {Task title}**

{Extra details and description for the implementation of the task}
```

5. **Example structure**  
```markdown
# EPIC: 1. Setup Flask Application Factory Pattern

Implement a modular Flask app using the application factory pattern. Include structured configuration management with environment-based settings, comprehensive error handling, logging setup, and extension registration to support different environments (development, testing, production).


## Relevant Files

- `app/config.py` - Manages environment-based configuration settings (development, testing, production) with structured class hierarchies for different deployment environments.
- `tests/test_config.py` - Validates configuration loading, environment variable handling, and ensures proper settings isolation across different environments.
- `app/extensions.py` - Centralizes Flask extension initialization and registration, enabling clean separation of concerns in the application factory pattern.
- `app/logging_config.py` - Configures structured logging with environment-specific handlers, formatters, and log levels for comprehensive application monitoring.
- `tests/test_logging_config.py` - Tests logging configuration functionality, ensuring proper log formatting, handler setup, and environment-specific logging behavior.
- `app/error_handlers.py` - Implements comprehensive error handling with custom exception classes and HTTP error responses for robust application behavior.
- `tests/test_error_handler.py` - Validates error handling mechanisms, ensuring proper error responses, status codes, and exception handling across different scenarios.
- `tests/test_app_factory.py` - Tests the application factory pattern implementation, verifying proper app creation, configuration loading, and extension registration across environments.


## Notes

- Unit tests should be placed under `/tests/`, testing for `src/dir/file1.py` should be on `tests/app/dir/test_file1.py`.
- Use `pytest` to run all tests in the project.


## STORY and TASK Breakdown

- [ ] 1.1 Implement Configuration Classes Structure
    - [ ] 1.1.1 Create a BaseConfig
    - [ ] 1.1.2 Create DevelopmentConfig
    - [ ] 1.1.3 Create TestingConfig
    - [ ] 1.1.4 Create ProductionConfig
    - [ ] 1.1.5 Create configuration selection mechanism
- [ ] 1.2 Implement Application Factory Function
    - [ ] 1.2.1 Create create_app Function
    - [ ] 1.2.2 Implement configuration loading
    - [ ] 1.2.3 Add extension initialization


## STORY: **1.1 Implement Configuration Classes Structure**

Develop a structured configuration system to manage different environments (development, testing, production) within the Flask application


### TASK: **1.1.1 Create a BaseConfig**

Create an `app/config.py` file and a `BaseConfig` class that will be the base for all configuration classes.
This config class will contain as class variables all the configuration parameters that our app will require
For configuration values that will need to be set at runtime (as opposed to import time) we will override those class variables on the subclasses'  __init__


### TASK: **1.1.2 Create DevelopmentConfig**

Create in `app/config.py` a `DevelopmentConfig` class and have it set the configuration values for our development environment


### TASK: **1.1.3 Create TestingConfig**

Create in `app/config.py` a `TestingConfig` class and have it set the configuration values for our testing environment


### TASK: **1.1.4 Create ProductionConfig**

Create in `app/config.py` a `ProductionConfig` class and have it set the configuration values for our production environment


### TASK: **1.1.5 Create configuration selection mechanism**

Implement `get_config()` function with environment-based configuration selection and validation


## STORY: **1.2 Implement Application Factory Function**

Create the main application factory function that instantiates and configures Flask applications with proper extension initialization


### TASK: **1.2.1 Create create_app Function**

Create the main `create_app()` function in `app/__init__.py` that serves as the application factory, accepting optional test configuration


### TASK: **1.2.3 Add extension initialization**

Implement systematic extension initialization following proper Flask patterns
```

6. **Tone & style**
- Be concise and neutral.
- Use consistent numbering (e.g., 1, 1.1, 1.1.1).
- Keep descriptions clear so any developer can follow them step by step.

7. **Flagging entries as DONE**
- When asked by the user to flag a {Task} as DONE replace its `[ ]` next to their title with `[x]`.
- When a {Story} has all its {Task} flagged as DONE, flag the {Story}'s `[ ]` as well.
- When an {Epic} has all its {Stories} flagged as DONE, flag the {Epic}'s `[ ]` as DONE as well, do the same in `tasks/epics.md`.
