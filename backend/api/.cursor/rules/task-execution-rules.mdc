---
description: when asked to implement a subtask (or task) from a /tasks/xx_task.md file
globs: 
alwaysApply: false
---
## Goal
Given:

- A project's documentation (`README.md`)
- Its list of high-level tasks (`tasks/master_plan.md`)
- A specific task file (e.g. `tasks/01_task.md`)
- The user's choice of a {subtask} or {subsubtask}

Implement exactly that {subtask}/{subsubtask} per its definition in the task file.


## Terms
- **{task}**: one of the high-level items in `tasks/master_plan.md`.
- **{subtask}**: a first-level step under a {task} in `tasks/{task_num}_task.md`.
- **{subsubtask}**: a second-level, granular step under a {subtask}.
- **{... num}**: the numeric identifier (e.g. 1.1).
- **{... title}**: the title text (e.g. “Implement Configuration Classes”).
- **{... description}**: the detailed instructions for a step.


## Process
1. **Read context**
- Open `/README.md`
- Understand goals, tech stack, folder structure, existing conventions, project requirements, architecture. guidelines, etc. 
- Open `/tasks/master_plan.md` and the chosen task plan file (eg `tasks/01_task.md`)
- Understand the two-level breakdown and the goal intended to be achieved by the task definition.

2. **Handle {subtask}s**
- If a specific {subsubtask} is requested, skip to 3.
- Locate the {subtask}. Review its {subsubtasks}.
- Find the first unchecked (eg `[ ]`). Show it to the user and ask permission to continue.
- When approved, proceed to step 3. Repeat until all `[ ]` are `[x]`. Then mark the {subtask} with `[x]`.

3. **Implement a {subsubtask}**
- Run the full test suite. Note any existing failures.
- Confirm with the user if pre-existing failures can be ignored.
- Write code that follows project guidelines and has no warnings or linting errors.
- Add or update unit tests to cover new logic.
- Rerun the full test suite.
    - All tests must pass. Legacy failures allowed if unchanged; notify the user.
- Flag the {subsubtask} with `[x]`

## Best Practice Reminders
- Stick to one {subsubtask} implementation at a time.
- Ask when scope or requirements are unclear. 
- Confirm assumptions with the user.
- Keep PRs small, self-contained and fully tested.
