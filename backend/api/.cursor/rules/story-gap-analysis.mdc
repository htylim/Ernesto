---
description: when asked to perform a gap analysis on a story
globs: 
alwaysApply: false
---
## Goal

Given:

- a project's existing documentation (`/README.md`)
- a project's enumeration of its high-level epics (`/tasks/epics.md`)
- an epic breakdown file (user given) to perform GAP analysis of (e.g. `tasks/01_epic.md`)

Perform a thorough GAP analysis on what the Epic intended to be implemented vs what is currently implemented, and update the Epic breakdown file to reflect what is done and what is still missing. 


## Terms

- **{Epic}** : Top-level milestone or feature set that delivers a cohesive product outcome. Groups several stories and can span multiple sprints.
- **{Story}** : User-facing slice of an epic that provides a complete piece of functionality or a clear non-functional goal. Small enough to estimate in days.
- **{Task}** : Concrete engineering action required to complete a story (e.g., “Add API endpoint”, “Write unit tests”). Executable in a focused work session.
- **{Epic id}** : Epic identifier. Composed of one integer, e.g.: "1".
- **{Story id}** : Story identifier. Composed of {Epic Id} plus a story index, e.g.: "1.2".
- **{Task num}** : Task identifier. Composed of {Story num} plus a task index, e.g.: "1.2.4".
- **{Epic|Story|Task title}** : One sentence title describing the given Epic, Story or task.
- **{Epic|Story|Task description}** : Longer description of the task, subtask, subsubtask.


## Output

- **format**: Markdown (`.md`)
- **location**: `/tasks/`
- **filename**: `{Epic id}_epic.md` (eg `01_epic.md`)


## Process

1. **Read project spec and Epic roadmap**
- Open `/README.md`
- Understand the project and all its functional and technical requirements as stated in the file. 
- Open `/tasks/epics.md`
- Understand the split of the project into high-level epics for the implementation of the project.
- Open the user given epic breakdown file (e.g. `tasks/01_epic.md`)
- Understand its step-by-step two-level roadmap of {Stories} and {Tasks} to drive the implementation of the Epic. 

2. **Perform GAP analysis**
- Thoroughly walk the step-by-step list of Stories and Tasks, checking whether if each {Story} and {Task} if fulfilled by the current state of the project implementation.
- Flag the {Story}/{Task} as DONE if required. (e.g.: replace `[ ]` with `[x]`)
- if a {Story} has all its {Task} DONE mark the {Story} as DONE as well.
- if an {Epic} has all its {Stories} DONE mark the Epic DONE as well (as well in `/tasks/epics.md`).
- To each `## STORY: {Story}` and `### TASK: {Task}` section append what was done, what is still missing, and any additional comment important for the implementation of the remainder of the item.
- At the end of the file append a new `## Gap Analysis Summary` section with the analysis overall result.

3. **Example Output**
The following is an example of a correct update to an Epic breakdown file (NOTE: the file is only shown partially):

```markdown
# EPIC: [x] 1 Setup Flask Application Factory Pattern

Implement a modular Flask app using the application factory pattern. Include structured configuration management with environment-based settings, comprehensive error handling, logging setup, and extension registration to support different environments (development, testing, production).

✅ All components have been implemented with comprehensive test coverage and validation.

...

## STORY and TASK Breakdown

- [x] 1.1 Implement Configuration Classes Structure
    - [x] 1.1.1 Create BaseConfig class with common settings
    ...
- [x] 1.2 Setup Flask Extensions Infrastructure
    - [x] 1.2.1 Create extensions module with Flask extension instances
...


## STORY: **1.1 Implement Configuration Classes Structure**

Develop a structured configuration system to manage different environments (development, testing, production) within the Flask application using Flask's native configuration patterns.

✅ Complete with comprehensive validation and enhanced JWT security features


### TASK: **1.1.1 Create BaseConfig class with common settings**
Create `app/config.py` file with a `BaseConfig` class containing all common configuration variables needed by the Flask application. Include database URI templates, JWT settings, SQLAlchemy settings, and other Flask-specific configurations that are shared across all environments.

✅ `BaseConfig` class created with comprehensive JWT settings including issuer/audience validation, token location configuration, and security settings. Includes Flask constants and API metadata.
...

---

## Gap Analysis Summary

✅ TASK COMPLETE - All Requirements Fulfilled

**Overall Status**: Task 1 "Setup Flask Application Factory Pattern" is **100% complete** with comprehensive implementation and testing.

### What Was Implemented:
- **Configuration Management**: Complete with BaseConfig, DevelopmentConfig, TestingConfig, and ProductionConfig classes
- **Application Factory**: Fully functional `create_app()` with modular component initialization
- **Extension Management**: SQLAlchemy, JWT, Alembic, and Marshmallow properly integrated
- **Logging System**: Environment-specific logging with file rotation and proper formatters
- **Error Handling**: Comprehensive HTTP error handlers with JSON responses
- **Testing**: Extensive test suite covering all components (test_config.py, test_app_factory.py, test_logging_config.py, test_error_handlers.py)

### Enhanced Features Beyond Requirements:
- **Validation System**: Comprehensive configuration validation via external validators module
- **JWT Security**: Enhanced JWT configuration with issuer/audience validation and blacklisting
- **Marshmallow Integration**: Additional serialization capabilities beyond basic requirements
- **Development Warnings**: Warning systems for development environment misconfigurations
- **Comprehensive Testing**: 433 lines of factory tests, 311 lines of config tests, extensive coverage

### Current Project State:
- All planned components are implemented and functional
- Comprehensive test coverage validates all functionality
- Production-ready with proper security configurations
- Follows Flask best practices and application factory pattern
- Ready for next development phase

**No gaps identified - proceed to next task.**
```

4. **Communicate result to user**
- Report back to the user the result of the GAP analysis stating what is done, what is missing, and how current implementation differs from what was aimed in the task plan.
