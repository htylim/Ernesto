---
description: When interacting with PostgresSQL thru CLI, code or setting up/modifying models and/or migrations
globs: 
alwaysApply: false
---
# Database Operations

This rule documents how to interact with the PostgreSQL database for the Ernesto project using Flask-Alembic for migrations.

## **Database Connection Configuration**

Based on [docker-compose.yml](mdc:docker-compose.yml), the database connection details are:

- **Host:** `db` (Docker service name)
- **Port:** `5432` 
- **User:** `postgres`
- **Password:** `postgres`
- **Database:** `ernesto`

## **Flask-Alembic Migration Commands**

Flask-Alembic provides a Flask-native interface to Alembic migrations. All commands are prefixed with `flask db`.

### **Basic Migration Operations**
```bash
# Apply all pending migrations to latest
flask db upgrade

# Apply migrations to a specific revision
flask db upgrade <revision_id>

# Rollback to previous migration
flask db downgrade

# Rollback to a specific revision
flask db downgrade <revision_id>

# Rollback to base (empty database)
flask db downgrade base
```

### **Migration Information Commands**
```bash
# Show current migration revision
flask db current

# Show migration history
flask db history

# Show migration heads (latest revisions)
flask db heads

# Show pending migrations
flask db show <revision_id>
```

### **Creating New Migrations**
```bash
# Generate a new migration with auto-detection of model changes (default behavior)
flask db revision "Description of changes"

# Create an empty migration file for custom SQL
flask db revision --empty "Empty migration for custom SQL"
```

## **PostgreSQL Commands (psql)**

### **Basic Connection**
```bash
# Connect to PostgreSQL server
PGPASSWORD=postgres psql -h db -U postgres

# Connect to specific database
PGPASSWORD=postgres psql -h db -U postgres -d ernesto
```

### **Execute Single Commands**
```bash
# Run SQL command directly
PGPASSWORD=postgres psql -h db -U postgres -c "COMMAND_HERE"

# Run SQL on specific database
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "COMMAND_HERE"
```

### **Common Database Operations**
```bash
# List all tables
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "\dt"

# Drop database (handle active connections first)
PGPASSWORD=postgres psql -h db -U postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'ernesto' AND pid <> pg_backend_pid();"
PGPASSWORD=postgres psql -h db -U postgres -c "DROP DATABASE ernesto;"

# Create database
PGPASSWORD=postgres psql -h db -U postgres -c "CREATE DATABASE ernesto;"
```

### **Verify Database State**
```bash
# List created tables
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "\dt"

# Verify table relationships
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "\d+ articles"

# Check foreign key constraints
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "SELECT conname, conrelid::regclass, confrelid::regclass FROM pg_constraint WHERE contype = 'f';"
```

## **Database Reset Process**

Complete database reset and schema recreation:

```bash
# 1. Terminate active connections
PGPASSWORD=postgres psql -h db -U postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'ernesto' AND pid <> pg_backend_pid();"

# 2. Drop existing database
PGPASSWORD=postgres psql -h db -U postgres -c "DROP DATABASE ernesto;"

# 3. Create fresh database
PGPASSWORD=postgres psql -h db -U postgres -c "CREATE DATABASE ernesto;"

# 4. Apply all migrations using Flask-Alembic
flask db upgrade

# 5. Verify tables created
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "\dt"

# 6. Run migration tests
pytest tests/test_migrations.py -v
```

## **Expected Schema Tables**

After successful migration, the database should contain:
- `alembic_version` - Migration tracking
- `api_clients` - API client management (Integer ID, unique constraints)
- `sources` - Content sources (UUID primary key, relationships to articles)
- `topics` - Topic categorization (UUID primary key, timestamps, relationships to articles)
- `articles` - Article storage (UUID primary key, foreign keys to sources/topics, performance indexes)

### **Table Relationships**
- `articles.source_id` → `sources.id` (with index)
- `articles.topic_id` → `topics.id` (with index)
- Cascade deletion: Deleting source/topic removes related articles

## **Flask-Alembic Best Practices**

### **Migration Development Workflow**
1. **Make Model Changes**: Modify models in `app/models/`
2. **Add Model Changes Tests**: Modify or add new tests for the models in `tests/models/`
2. **Generate Migration**: `flask db revision "Descriptive message"`
3. **Review Generated Code**: Always inspect the migration file before applying
4. **Run Tests **: Run `pytest tests/test_migrations.py` to verify migrations plus any new tests added
5. **Apply Migration**: `flask db upgrade`
6. **Verify Schema**: Check database state with psql commands

### **Migration File Best Practices**
- **Use descriptive messages**: `flask db revision "Add user preferences table"`
- **Review auto-generated code**: Always check generated migrations for accuracy
- **Add custom logic when needed**: Include data migrations, custom indexes, etc.
- **Test both upgrade and downgrade**: Ensure migrations are reversible
- **Use conditional operations**: Check if tables/columns exist before creating/dropping

### **Safe Migration Patterns**
```python
# ✅ DO: Check if table exists before creating
def upgrade():
    # Check if table already exists
    bind = op.get_bind()
    inspector = inspect(bind)
    if 'new_table' not in inspector.get_table_names():
        op.create_table('new_table', ...)

# ✅ DO: Use batch operations for SQLite compatibility
def upgrade():
    with op.batch_alter_table('articles') as batch_op:
        batch_op.add_column(sa.Column('new_column', sa.String(50)))

# ❌ DON'T: Drop columns without checking dependencies
def upgrade():
    op.drop_column('articles', 'old_column')  # May break if referenced elsewhere
```

### **Data Migration Patterns**
```python
# ✅ DO: Include data migrations when needed
def upgrade():
    # Create new table
    op.create_table('new_table', ...)
    
    # Migrate existing data
    connection = op.get_bind()
    connection.execute(
        text("INSERT INTO new_table (id, name) SELECT id, name FROM old_table")
    )
    
    # Drop old table
    op.drop_table('old_table')
```

### **Testing Migrations**
- **Run migration tests**: `pytest tests/test_migrations.py -v`
- **Test on fresh database**: Verify migrations work from empty state
- **Test rollbacks**: Ensure downgrade operations work correctly
- **Verify schema integrity**: Check foreign keys, indexes, and constraints

### **Testing Model Changes**
When adding or modifying models, comprehensive testing is essential:

- **Model validation tests**: Test field constraints, required fields, and data types
- **Relationship tests**: Verify foreign key relationships and cascade behaviors
- **Business logic tests**: Test any custom methods or properties on the model
- **Database schema tests**: Ensure the migration creates the expected table structure
- **Data integrity tests**: Test unique constraints, indexes, and check constraints
- **Performance tests**: For models with complex queries or large datasets
- **Test Organization Structure:** `tests/models/` and include a test file per model (should mirror `app/models/`)

## **Troubleshooting**

### **Connection Issues**
- Ensure the `db` container is running: `docker-compose ps`
- Check if database service is healthy: `docker-compose logs db`

### **Migration Issues**
```bash
# Check current migration status
flask db current

# View migration history
flask db history

# Check for migration conflicts
flask db heads

# Reset to specific revision if needed
flask db downgrade <revision_id>
```

### **Common Migration Errors**
- **"Target database is not up to date"**: Run `flask db upgrade` first
- **"Multiple heads detected"**: Merge migration branches or reset to common revision
- **"Can't locate revision"**: Check migration files in `app/migrations/`
- **Foreign key constraint errors**: Ensure referenced tables exist before creating relationships

### **Migration Files Location**
- **Directory**: Migration scripts are stored directly in `app/migrations/`. Note that there is no `versions` subdirectory.
- **Naming Convention**: Files are named using the format `<revision_id>_<description>.py`.

### **Active Connection Errors**
If you get "database is being accessed by other users":
1. First terminate connections using the `pg_terminate_backend` command above
2. Then proceed with the database operation

## **Integration with Flask Application**

Flask-Alembic is initialized in [app/__init__.py](mdc:app/__init__.py):

```python
from flask_alembic import Alembic

# Initialize Flask-Alembic instance
alembic = Alembic()

def create_app():
    app = Flask(__name__)
    
    # Import models before Alembic initialization
    from app import models
    
    # Initialize Flask-Alembic with the app
    alembic.init_app(app)
    
    return app
```

This setup ensures that:
- Models are registered with SQLAlchemy before migration detection
- Flask-Alembic can auto-detect model changes
- Migration commands are available via `flask db` CLI
- Migrations work seamlessly with the Flask application context
