---
description: How to interact with the PostgreSQL database
globs: 
alwaysApply: false
---
# Database Operations

**NOTE:** This documentation currently references raw Alembic commands. These will be updated to Flask-Alembic commands in task 1.11. Raw Alembic configuration has been removed in task 1.6.

This rule documents how to interact with the PostgreSQL database for the Ernesto project.

## **Database Connection Configuration**

Based on [docker-compose.yml](mdc:docker-compose.yml), the database connection details are:

- **Host:** `db` (Docker service name)
- **Port:** `5432` 
- **User:** `postgres`
- **Password:** `postgres`
- **Database:** `ernesto`

## **PostgreSQL Commands (psql)**

### **Basic Connection**
```bash
# Connect to PostgreSQL server
PGPASSWORD=postgres psql -h db -U postgres

# Connect to specific database
PGPASSWORD=postgres psql -h db -U postgres -d ernesto
```

### **Execute Single Commands**
```bash
# Run SQL command directly
PGPASSWORD=postgres psql -h db -U postgres -c "COMMAND_HERE"

# Run SQL on specific database
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "COMMAND_HERE"
```

### **Common Database Operations**
```bash
# List all tables
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "\dt"

# Drop database (handle active connections first)
PGPASSWORD=postgres psql -h db -U postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'ernesto' AND pid <> pg_backend_pid();"
PGPASSWORD=postgres psql -h db -U postgres -c "DROP DATABASE ernesto;"

# Create database
PGPASSWORD=postgres psql -h db -U postgres -c "CREATE DATABASE ernesto;"
```

### **Verify Database State**
```bash
# List created tables
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "\dt"

# Verify table relationships
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "\d+ articles"
```

## **Database Reset Process**

Complete database reset and schema recreation:

```bash
# 1. Terminate active connections
PGPASSWORD=postgres psql -h db -U postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'ernesto' AND pid <> pg_backend_pid();"

# 2. Drop existing database
PGPASSWORD=postgres psql -h db -U postgres -c "DROP DATABASE ernesto;"

# 3. Create fresh database
PGPASSWORD=postgres psql -h db -U postgres -c "CREATE DATABASE ernesto;"

# 4. Apply all migrations (will use Flask-Alembic after setup)
# flask db upgrade

# 5. Verify tables created
PGPASSWORD=postgres psql -h db -U postgres -d ernesto -c "\dt"

# 6. Run migration tests (to be completed)
```

## **Expected Schema Tables**

After successful migration, the database should contain:
- `alembic_version` - Migration tracking
- `api_clients` - API client management (Integer ID, unique constraints)
- `sources` - Content sources (UUID primary key, relationships to articles)
- `topics` - Topic categorization (UUID primary key, timestamps, relationships to articles)
- `articles` - Article storage (UUID primary key, foreign keys to sources/topics, performance indexes)

### **Table Relationships**
- `articles.source_id` → `sources.id` (with index)
- `articles.topic_id` → `topics.id` (with index)
- Cascade deletion: Deleting source/topic removes related articles

## **Troubleshooting**

### **Connection Issues**
- Ensure the `db` container is running: `docker-compose ps`
- Check if database service is healthy: `docker-compose logs db`

### **Migration Issues**
- Review migration files in `migrations/versions/`
- Run migration tests (to be completed)

### **Active Connection Errors**
If you get "database is being accessed by other users":
1. First terminate connections using the `pg_terminate_backend` command above
2. Then proceed with the database operation

## **Best Practices**
- **Always use PGPASSWORD** environment variable to avoid password prompts
- **Terminate connections** before dropping databases
- **Verify migrations** with `\dt` and `alembic check` after applying
- **Run tests** after schema changes (to be completed)
- **Backup data** before major schema changes
- **Test migrations** in development before production
- **Use conditional migrations** for production safety
- **Verify foreign key indexes** exist for performance

## **Model Development**

### **Creating New Models**
When adding new models to [app/models.py](mdc:app/models.py):
1. Define the model with proper relationships
2. Generate migration: `flask db revision "Add new model"`
3. Review generated migration for accuracy
4. Add tests to the migration tests (to be completed)
5. Run tests (to be completed)
6. Apply migration: `flask db upgrade`
