"""Add index to api_clients.name column

Revision ID: 1749915703
Revises: 1749500376
Create Date: 2025-06-14 15:41:43.361073

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "1749915703"
down_revision: Union[str, None] = "1749500376"
branch_labels: Union[str, Sequence[str], None] = ()
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Use batch mode for SQLite compatibility
    with op.batch_alter_table("api_clients", schema=None) as batch_op:
        # Check if the old constraint exists before dropping it
        # This is necessary because in a fresh migration, the table created
        # by batch mode might not have the old named constraint
        inspector = sa.inspect(op.get_bind())
        constraints = inspector.get_unique_constraints("api_clients")
        if any(c["name"] == "api_clients_name_key" for c in constraints):
            batch_op.drop_constraint("api_clients_name_key", type_="unique")

        batch_op.create_index(batch_op.f("ix_api_clients_name"), ["name"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Use batch mode for SQLite compatibility
    with op.batch_alter_table("api_clients", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_api_clients_name"))
        batch_op.create_unique_constraint("api_clients_name_key", ["name"])
    # ### end Alembic commands ###
