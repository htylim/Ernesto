"""Initial database schema

Revision ID: c9b5bd0bd55f
Revises:
Create Date: 2025-05-23 14:07:13.868029

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "c9b5bd0bd55f"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Check if tables exist before creating them
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    existing_tables = inspector.get_table_names()

    # Create api_clients table if it doesn't exist
    if "api_clients" not in existing_tables:
        op.create_table(
            "api_clients",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("name", sa.String(length=100), nullable=False),
            sa.Column("api_key", sa.String(length=64), nullable=False),
            sa.Column(
                "is_active",
                sa.Boolean(),
                nullable=False,
                server_default=sa.text("true"),
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                nullable=True,
                server_default=sa.func.current_timestamp(),
            ),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("api_key"),
            sa.UniqueConstraint("name"),
        )

    # Create sources table if it doesn't exist
    if "sources" not in existing_tables:
        op.create_table(
            "sources",
            sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column("logo_url", sa.String(), nullable=True),
            sa.Column("name", sa.String(length=255), nullable=False),
            sa.Column("homepage_url", sa.String(), nullable=True),
            sa.Column(
                "is_enabled",
                sa.Boolean(),
                nullable=False,
                server_default=sa.text("true"),
            ),
            sa.PrimaryKeyConstraint("id"),
        )

    # Create topics table if it doesn't exist
    if "topics" not in existing_tables:
        op.create_table(
            "topics",
            sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column("label", sa.String(length=255), nullable=False),
            sa.Column(
                "added_at", sa.DateTime(), nullable=False, server_default=sa.func.now()
            ),
            sa.Column(
                "updated_at",
                sa.DateTime(),
                nullable=False,
                server_default=sa.func.now(),
            ),
            sa.Column(
                "coverage_score",
                sa.Integer(),
                nullable=False,
                server_default=sa.text("0"),
            ),
            sa.PrimaryKeyConstraint("id"),
        )

    # Create articles table if it doesn't exist
    if "articles" not in existing_tables:
        op.create_table(
            "articles",
            sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column("title", sa.Text(), nullable=False),
            sa.Column("url", sa.String(), nullable=False),
            sa.Column("image_url", sa.String(), nullable=True),
            sa.Column("brief", sa.Text(), nullable=True),
            sa.Column("topic_id", postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column("source_id", postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column(
                "added_at", sa.DateTime(), nullable=False, server_default=sa.func.now()
            ),
            sa.ForeignKeyConstraint(
                ["source_id"],
                ["sources.id"],
            ),
            sa.ForeignKeyConstraint(
                ["topic_id"],
                ["topics.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )

    # Create indexes for foreign keys if they don't exist (performance optimization)
    existing_indexes = (
        [idx["name"] for idx in inspector.get_indexes("articles")]
        if "articles" in existing_tables
        else []
    )

    if "ix_articles_source_id" not in existing_indexes:
        op.create_index(
            op.f("ix_articles_source_id"), "articles", ["source_id"], unique=False
        )
    if "ix_articles_topic_id" not in existing_indexes:
        op.create_index(
            op.f("ix_articles_topic_id"), "articles", ["topic_id"], unique=False
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Check if tables exist before dropping them
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    existing_tables = inspector.get_table_names()

    # Drop indexes if they exist
    if "articles" in existing_tables:
        existing_indexes = [idx["name"] for idx in inspector.get_indexes("articles")]
        if "ix_articles_topic_id" in existing_indexes:
            op.drop_index(op.f("ix_articles_topic_id"), "articles")
        if "ix_articles_source_id" in existing_indexes:
            op.drop_index(op.f("ix_articles_source_id"), "articles")

    # Drop tables in reverse order (to respect foreign keys) if they exist
    if "articles" in existing_tables:
        op.drop_table("articles")
    if "topics" in existing_tables:
        op.drop_table("topics")
    if "sources" in existing_tables:
        op.drop_table("sources")
    if "api_clients" in existing_tables:
        op.drop_table("api_clients")
    # ### end Alembic commands ###
