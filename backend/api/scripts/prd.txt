<context>
# Overview
The Ernesto API service is the backend component of the "Ernesto news-curating solution". Its primary purpose is to provide the Ernesto Chrome extension with curated news data, enabling users to efficiently stay informed about weekly events and issues.

The core problem it addresses is information overload from daily news. Ernesto allows users to consume news weekly by:
- Aggregating articles from multiple news sources.
- Identifying key events/issues (Topics) that occurred during the week.
- Coalescing all articles related to each event/issue.
- Measuring "news relevancy" by the level of coverage across sources (number of articles per topic).
- Ultimately, providing users with a curated list of summarized events/issues, reducing reading time and keeping them comprehensively updated.

The API service interacts with a PostgreSQL database, which is populated by a separate Worker Service responsible for scraping and processing news articles. The sole consumer of this API is the Ernesto Chrome extension, which will act as a confidential client.

# Core Features

## Entities / Data Models

The API will expose the following resources, reflecting the underlying database structure:

1.  **Articles**
    *   `id`: UUID, Primary Key
    *   `title`: TEXT, Title of the article
    *   `url`: URL, Direct link to the original article
    *   `image_url`: URL, Link to a representative image for the article
    *   `brief`: TEXT, A short summary or abstract of the article
    *   `topic_id`: UUID, Foreign Key referencing the `Topics` entity
    *   `source_id`: UUID, Foreign Key referencing the `Sources` entity
    *   `added_at`: TIMESTAMP, When the article was added to the system

2.  **Sources**
    *   `id`: UUID, Primary Key
    *   `logo_url`: URL, Link to the news source's logo
    *   `name`: TEXT, Name of the news source
    *   `homepage_url`: URL, Link to the news source's homepage
    *   `is_enabled`: BOOLEAN, Whether the source is currently active for scraping

3.  **Topics** (Events/Issues)
    *   `id`: UUID, Primary Key
    *   `label`: TEXT, A concise name or label for the event/issue
    *   `added_at`: TIMESTAMP, When the topic was first identified (e.g., date of the earliest article)
    *   `updated_at`: TIMESTAMP, When the topic was last updated (e.g., new article added)
    *   `coverage_score`: INTEGER, Number of articles associated with this topic. This metric indicates relevancy.

## API Endpoints

**Version: MVP (Minimum Viable Product)**

1.  **Authentication**
    *   `POST /api/auth/token`
        *   **Description**: Authenticates the Chrome extension client.
        *   **Request Body**: `{ "client_id": "chrome_extension_client_id", "client_secret": "chrome_extension_client_secret", "grant_type": "client_credentials" }` (Content-Type: `application/x-www-form-urlencoded` or `application/json` - to be decided)
        *   **Response**: `{ "access_token": "jwt_token_here", "token_type": "bearer", "expires_in": 3600 }`
        *   **Details**: Issues a JWT upon successful client authentication. This token will be required for all other API endpoints. The `client_id` and `client_secret` will be pre-configured for the extension.

2.  **Topics**
    *   `GET /api/topics`
        *   **Description**: Retrieves a list of topics, sorted by coverage score (descending).
        *   **Query Parameters**:
            *   `start_date` (YYYY-MM-DD, mandatory)
            *   `end_date` (YYYY-MM-DD, mandatory)
        *   **Response**: List of Topic objects.
        *   **Details**: Sorted by `coverage_score` (descending). Requires client authentication.

    *   `GET /api/topics/{topic_id}`
        *   **Description**: Retrieves details for a specific topic.
        *   **Path Parameter**: `topic_id` (UUID)
        *   **Response**: Single Topic object.
        *   **Details**: Requires client authentication.

3.  **Articles**
    *   `GET /api/articles`
        *   **Description**: Retrieves a list of articles.
        *   **Query Parameters**:
            *   `start_date` (YYYY-MM-DD, mandatory)
            *   `end_date` (YYYY-MM-DD, mandatory)
            *   `topic_id` (UUID, optional): Filter articles by a specific topic.
            *   `sort_by` (optional, e.g., "date_desc", "date_asc", default: "date_desc" by `added_at`)
        *   **Response**: List of Article objects.
        *   **Details**: Sorted chronologically by `added_at` by default. Requires client authentication.

    *   `GET /api/articles/{article_id}`
        *   **Description**: Retrieves details for a specific article.
        *   **Path Parameter**: `article_id` (UUID)
        *   **Response**: Single Article object.
        *   **Details**: Requires client authentication.

4.  **Sources**
    *   `GET /api/sources`
        *   **Description**: Retrieves a list of all news sources.
        *   **Response**: List of Source objects.
        *   **Details**: Primarily for administrative purposes or if the extension needs to display source info. Requires client authentication.

    *   `GET /api/sources/{source_id}`
        *   **Description**: Retrieves details for a specific news source.
        *   **Path Parameter**: `source_id` (UUID)
        *   **Response**: Single Source object.
        *   **Details**: Requires client authentication.

**Future Enhancements:**

*   `GET /api/topics`:
    *   Include a representative `image_url` (from one of its prominent articles).
    *   Include a `mini_brief` (a short summary of the topic, potentially AI-generated by the worker or API).
*   `GET /api/topics/{topic_id}/summary`:
    *   Returns a comprehensive, coalesced summary of all articles under that topic for the specified date range. This might involve significant processing or rely on pre-computed summaries from the worker service.
*   Enhanced sorting/filtering options for articles if needed.

# User Experience (API Consumer: Chrome Extension)
The Chrome extension will guide the user through the following primary flow:
1.  Extension authenticates itself with the API using its client credentials (calls `/api/auth/token`).
2.  Extension prompts the user for the desired news period (e.g., "last 7 days").
3.  Extension calls `/api/topics` with the calculated date range.
4.  Extension displays the list of topics (sorted by coverage), potentially with titles and representative images (future).
5.  User selects a topic.
6.  Extension calls `/api/articles` with the date range and selected `topic_id`.
7.  Extension displays the articles for that topic.
8.  (Future) User requests a full summary for a topic, extension calls `/api/topics/{topic_id}/summary`.
</context>

# Project Setup and Development Environment

A placeholder project for the Ernesto API has already been created. The development environment is set up as a **DEV Container**, with the project's root located at `/ernesto/backend/api` inside the container. The repository includes a `devcontainer` configuration, `docker-compose`, and `Dockerfile` to facilitate consistent local development and deployment.

Some initial scaffolding exists in the `api/` directory (such as `requirements.txt` and some Python files). However, this is **not a template to be strictly followed**â€”we are free to reorganize, refactor, or replace any part of the structure to better suit the needs of the project and to align with best practices.

**Development Guidelines:**
- We are encouraged to make any modifications deemed necessary to improve the codebase, architecture, or workflow.
- All development should follow modern coding and web development best practices, with particular attention to Flask and SQLAlchemy conventions for their respective parts of the codebase.
- As implementation progresses, we should create unit tests to verify all new functionality and changes.
- The goal is to maintain a clean, maintainable, and well-tested codebase that adheres to industry standards.
- We must proactively remove unused code and files, avoiding the accumulation of "dead" code that is no longer in use.

<PRD>
# Technical Architecture

## System Components
1.  **Flask API Server**: The core component this PRD defines. Handles all API requests from the Chrome extension. Written in Python.
2.  **PostgreSQL Database**: Shared database storing articles, topics, and sources. Populated by the Worker Service.
3.  **Worker Service**: Google Lambda functions (assumed). Responsible for scraping news articles from various sources, processing them (e.g., extracting content, identifying topics, calculating coverage score), and storing them in the PostgreSQL database. (Out of scope for this PRD).
4.  **Chrome Extension**: The user-facing client application. Acts as a confidential client to the API. (Out of scope for this PRD).
5.  **Google Cloud Services (GCS)**: Hosting platform for the API (e.g., Cloud Run preferably, or App Engine) and the worker functions (Lambda).

## Data Models (Database Schema)
The database schema will include tables for `Articles`, `Sources`, and `Topics` as detailed in the "Core Features > Entities" section, managed using SQLAlchemy (ORM) and Flask-Alembic (migrations). Key relationships:
-   `Articles.topic_id` -> `Topics.id` (Many-to-One)
-   `Articles.source_id` -> `Sources.id` (Many-to-One)
The `Topics.coverage_score` will be the count of articles associated with it.

## APIs and Integrations
-   **Internal**:
    -   The API serves data to the Chrome Extension.
    -   The API reads data from the PostgreSQL database.
-   **External**: No external API consumption is planned for the API service itself in the MVP. The Worker Service will handle external news source interactions.

## Authentication
-   **Mechanism**: OAuth 2.0 Client Credentials Grant Flow, using JWTs (JSON Web Tokens) as access tokens.
-   **Flow**:
    1.  The Chrome Extension (client) requests an access token from the API's token endpoint (`/api/auth/token`) by sending its `client_id` and `client_secret` and `grant_type="client_credentials"`.
    2.  The API server validates the client credentials.
    3.  If valid, the API server generates a JWT and returns it to the extension.
    4.  The Chrome Extension stores the JWT securely and includes it in the `Authorization: Bearer <token>` header for all subsequent requests to protected API endpoints.
-   This provides a secure way for the extension (a machine client) to access the API.

## Infrastructure Requirements
-   Deployment on Google Cloud Services (Cloud Run is the preferred option for the Flask API).
-   PostgreSQL instance (e.g., Google Cloud SQL).
-   Standard logging and monitoring setup within GCS.
-   Development environment uses Docker, with Ruff for linting and Black for formatting.

# Development Roadmap

## MVP (Minimum Viable Product) Requirements
The goal is to deliver a functional API that allows the Chrome extension to authenticate itself and retrieve topics and articles for a given date range. Each phase will conclude with unit testing of the implemented components.
1.  **Phase 1: Core Setup & Authentication**
    *   Finalize DB schema for `Sources`, `Topics`, `Articles` (using SQLAlchemy and Flask-Alembic for migrations).
    *   Implement Client Credentials store/management on the API side.
    *   Implement `/api/auth/token` endpoint with JWT generation for client credentials.
    *   Setup basic protected route middleware checking for JWT.
    *   **Testing**: Write and pass unit tests for authentication logic (token generation, credential validation) and middleware.
2.  **Phase 2: Core Data Endpoints**
    *   Implement `Sources` model and `/api/sources`, `/api/sources/{id}` endpoints.
    *   Implement `Topics` model (including `coverage_score` logic if calculated by API, or assuming it's provided by worker) and `/api/topics` (sorted by coverage), `/api/topics/{id}` endpoints.
    *   Implement `Articles` model and `/api/articles`, `/api/articles/{id}` endpoints.
    *   **Testing**: Write and pass unit tests for all new model interactions and API endpoints (request/response, basic logic).
3.  **Phase 3: Filtering, Sorting & Integration Testing**
    *   Implement date range filtering for `/api/topics` and `/api/articles`.
    *   Implement `topic_id` filtering for `/api/articles`.
    *   Implement sorting options for `/api/articles`.
    *   **Testing**: Write and pass unit tests for filtering and sorting logic. Conduct integration tests for the API as a whole.

## Future Enhancements (Post-MVP)
1.  Implement topic summary endpoint: `/api/topics/{topic_id}/summary`.
2.  Enhance `/api/topics` to include `image_url` and `mini_brief`.
3.  Rate limiting and enhanced security measures.
4.  API versioning.

# Logical Dependency Chain (MVP)
1.  **Database Schema Definition**: All models (`Sources`, `Topics`, `Articles`) must be defined first.
2.  **Authentication System**: `/api/auth/token` (Client Credentials Flow) is foundational as all other endpoints will require authentication.
3.  **Source Endpoints**: `/api/sources` and `/api/sources/{id}` can be implemented next, as they are simple and can help test DB connectivity.
4.  **Topic Endpoints**: `/api/topics` (sorted by coverage) and `/api/topics/{id}`. These are core to the user experience. The `coverage_score` needs to be available (either from DB or calculated).
5.  **Article Endpoints**: `/api/articles` and `/api/articles/{id}`. Dependent on Topics if filtering by `topic_id`.
6.  **Filtering and Sorting Logic**: Implement across Topic and Article endpoints.

This order ensures foundational pieces are built first, allowing iterative development and testing.

# Risks and Mitigations

1.  **Risk**: Worker Service Delays or Data Issues: The API is dependent on the Worker Service correctly populating the database, including the `coverage_score` for topics.
    *   **Mitigation**: Clear contract/interface definition between API and Worker Service. API might need a fallback or clear error if `coverage_score` is missing. Regular integration testing.
2.  **Risk**: Performance of Date Range Queries & Coverage Calculation: Large datasets could lead to slow queries. If API calculates coverage on-the-fly, it could be slow.
    *   **Mitigation**: Ensure `coverage_score` is pre-calculated by the worker and stored in the `Topics` table. Ensure proper database indexing. Implement pagination for all list endpoints from the start.
3.  **Risk**: Client Credentials Management: Securely storing and managing the Chrome extension's `client_id` and `client_secret` on the API side, and ensuring the extension can securely access them without exposing them in its own distributed code.
    *   **Mitigation**: `client_secret` on the API must be stored securely (e.g., hashed or in a secrets manager). The mechanism for the *extension* to obtain its credentials to send to the API needs careful consideration (e.g., baked in at build time, fetched from a secure configuration service - this is more an extension concern but impacts API client management). For MVP, a pre-shared secret baked into the extension might be a simpler start if distribution is controlled, but this has security implications.
4.  **Risk**: Scope Creep for MVP.
    *   **Mitigation**: Strictly adhere to the defined MVP features.

# Appendix
-   [README.md](mdc:README.md) for original project overview.
-   Project uses Flask, SQLAlchemy, PostgreSQL, JWT (for access tokens).
-   Development environment managed with Docker, linting with Ruff, formatting with Black.
</PRD> 