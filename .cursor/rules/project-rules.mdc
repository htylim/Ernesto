---
description: 
globs: 
alwaysApply: true
---
- Every time you choose to apply a rule explicitly state the rule(s) in the conversation. Abbreviate the rule description to a single word or phrase. ie: [rule:test writing]

## Project Context

- Read **thoroughly** [README.md](mdc:README.md) and [ARCHITECTURE.md](mdc:ARCHITECTURE.md)
- This is your memory of past decisions and changes. Keep both documents updated.

## Prompt solving rules

- Plan your approach first writing it into a `TASKS.md` file
- Break down large steps into smaller steps
- Completed steps mark with ✅
- Use a format like this:

```
# <short sentence description of the prompt>
<larger description of the complex task that is needed to do>
- [ ] step X
    - ✅ sub-step X-a
    - [ ] sub-step X-b
- [ ] step Y
- [ ] step Z
```
- Each step should include the implementation of a test to covers its logic, or be already covered by an already existing test.
- Run `npm test` at the end of each step to ensure the step was implemented correctly. Keep working on the step if not.

# Test rules

- Use Vitest
- Follow this structure:
  For a file like `src/common/crypto/cryptoUtils.js` we will use a test file named like this `tests/unit/common/crypto/crytoUtils.test.js`

# Chrome Extension Specifics

- Use Manifest V3
- Follow security best practices
- Optimize performance
- Handle errors gracefully
- Focus on user experience